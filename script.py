from vk_api.longpoll import VkLongPoll,VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from datetime import datetime as time

import vk_api
import handlers
import config

contributors = ['Seamo', 'Nyalen']    # Developers

def create_keyboard():
  """ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –¥–∏–∞–ª–æ–≥–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º """
  keyboard = VkKeyboard(one_time=False)

  keyboard.add_button('–ü–æ–º–æ—â—å', color=VkKeyboardColor.DEFAULT)
  keyboard.add_button('–ö–∞–∫ —è?', color=VkKeyboardColor.POSITIVE)

  keyboard.add_line()
  keyboard.add_button('–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å?', color=VkKeyboardColor.POSITIVE)

  return keyboard.get_keyboard()

vk_session = vk_api.VkApi(token=config.VK_TOKEN)
session_api = vk_session.get_api()
longpoll = VkLongPoll(vk_session)

print(f"{'-' * 20}\n{'Session was started': ^20}")
while True:                       # –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ VK
  for event in longpoll.listen():     # —Å–æ–±–∏—Ä–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Å –ø—Ä–æ—Å–ª—É—à–∫–∏
    if event.type == VkEventType.MESSAGE_NEW:      # –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ =>
      handler = handlers.MessageHandler(vk_session, session_api)  # –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

      if event.from_user and not event.from_me:
        keyboard = create_keyboard() # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = event.text.lower() # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if message == '–ù–∞—á–∞—Ç—å':                        
          handler.send_message(event.user_id, "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!", 0, keyboard) # –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–µ—Å—Å–æ–π
        elif message == '–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å?': 
          handler.send_message(event.user_id, f"–£ –º–µ–Ω—è {len(contributors)} —Å–æ–∑–¥–∞—Ç–µ–ª—è. Yul powered by {' and '.join(contributors)}", 0, keyboard) # –ø–∞—Å—Ö–∞–ª–û—á–∫–∞
        elif message == '–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å?':
          handler.send_message(event.user_id, f'–°–µ–≥–æ–¥–Ω—è: {str(time.date)}', random_id=0, keyboard = keyboard)
        elif message == '–∫–∞–∫ —è?':
          handler.send_message(event.user_id, f'–Ø –≤ –Ω–æ—Ä–º–µ!', random_id=0, keyboard = keyboard)
        elif message == '–ø–æ–º–æ—â—å':
          handler.send_message(event.user_id, f'–ü–æ–∫–∞ —è —Ç–æ–ª—å–∫–æ —É–∑–Ω–∞—é, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å, –ø—Ä–æ—Å—Ç–∏–∏ üëâüèªüëàüèª', random_id=0, keyboard = keyboard)
        else:
          # –æ—Ç–ø—Ä–∞–≤–∏–º —ç—Ö–æ, –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          handler.send_message(event.user_id, f"{event.text}", 0, keyboard)
        
        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–≥–∏
        print(f'TEXT: {event.text}')
        print(f'TIME: {str(time.strftime(time.now(), "%H:%M:%S"))}')
else:
  print(f"\n{'-' * 20}\n{'Session was started': ^20}")